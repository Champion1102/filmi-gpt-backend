openapi: 3.0.0
info:
  title: Authentication API
  version: 1.0.0
  description: API for user authentication and management.

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

paths:
  /api/login:
    post:
      summary: User login
      description: Authenticate a user and generate a JWT and refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        200:
          description: Login successful
        400:
          description: Invalid email or password
        404:
          description: User not found
        500:
          description: Internal server error

  /api/signup:
    post:
      summary: User signup
      description: Register a new user and generate a JWT and refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - name
                - email
                - password
      responses:
        200:
          description: Signup successful
        400:
          description: Email already registered or missing fields
        500:
          description: Internal server error

  /api/update:
    patch:
      summary: Update user details
      description: Update user information such as name, email, and about.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
                about:
                  type: string
      responses:
        200:
          description: User information updated successfully
        400:
          description: Missing fields or invalid data
        404:
          description: User not found
        500:
          description: Internal server error

  /api/verify:
    post:
      summary: Verify user JWT and refresh token
      description: Verify if the JWT and refresh token provided are valid.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jwttoken:
                  type: string
                refreshtoken:
                  type: string
              required:
                - jwttoken
                - refreshtoken
      responses:
        200:
          description: Tokens are valid
        400:
          description: Token expired or invalid

  /api/movies:
    get:
      summary: Retrieve a list of movies
      description: Get a paginated list of movies with optional search and filtering.
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
          description: "Number of movies to retrieve per page (default: 10)"
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: "Page number to fetch (default: 1)"
        - in: query
          name: category
          required: false
          schema:
            type: string
          description: Filter movies by category
        - in: query
          name: q
          required: false
          schema:
            type: string
          description: Search query for movie title or description
      responses:
        200:
          description: A list of movies
        400:
          description: Invalid request parameters
        500:
          description: Internal server error
    post:
      summary: Add a new movie
      description: Add a movie to the database with required details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                category:
                  type: string
                thumbnail:
                  type: string
              required:
                - name
                - description
                - category
                - thumbnail
      responses:
        201:
          description: Movie added successfully
        400:
          description: Missing required fields in the request body
        500:
          description: Internal server error

  /api/movies/{id}:
    patch:
      summary: Update a movie
      description: Update details of an existing movie by ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the movie to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                category:
                  type: string
                thumbnail:
                  type: string
      responses:
        200:
          description: Movie updated successfully
        400:
          description: Bad request, missing required fields
        404:
          description: Movie not found
        500:
          description: Internal server error
    delete:
      summary: Delete a movie by ID
      description: Delete a movie from the database by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the movie to delete
      responses:
        200:
          description: Movie deleted successfully
        404:
          description: Movie not found
        500:
          description: Internal server error
